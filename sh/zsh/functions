# Common
if [ -f ~/.functions ]; then
    . ~/.functions
fi

# ANSI select graphic rendition control sequences
sgr(){
	echo $'%{\x1B['${1}'m%}'    # Override to add non-printing escape
}

# Set PS1 components
set_ps1_components(){
	ps1_viins=$'\xEE\x82\xB0'
	ps1_vicmd=" "
	ps1_user=" %n "
	ps1_anchor_host=$'\xEE\x82\xB0'
	ps1_host=" %m "
	ps1_anchor_wd=$'\xEE\x82\xB0'
	ps1_wd=" %~ "
	ps1_anchor_prompt=$'\xEE\x82\xB0'
	ps1_git_dirty=$'\xEE\x82\xB2'
	ps1_git_clean=" "
}

# Style PS1 components
style_ps1_vimode(){

	local end=$(sgr 0)
	local reverse=$(sgr 7)
	local bg_default=$(sgr 49)

	local fg_vicmd=$(sgr_fg24 ${ps1_rgb_user_block[*]})
	local bg_vicmd=$(sgr_bg24 ${ps1_rgb_user_block[*]})
	local fg_viins=$(sgr_fg24 ${ps1_rgb_user_block[*]})
	local bg_viins=${bg_default}

	ps1_vicmd="${bg_vicmd}${ps1_vicmd}${end}"
	ps1_viins="${reverse}${bg_viins}${fg_viins}${ps1_viins}${end}"

}

# Style git components
style_ps1_git(){

	ps1_rgb_git_block=(240 51 51)                # Git orange

	local end=$(sgr 0)
	local reverse=$(sgr 7)
	local bg_default=$(sgr 49)
	local fg_git_anchor=$(sgr_fg24 ${ps1_rgb_git_block[*]})
	if [[ "${ps1_pyvenv_venv}" == "" ]]; then
		local bg_git_anchor=${bg_default}
	else
		local bg_git_anchor=$(sgr_bg24 ${ps1_rgb_pyvenv_block[*]})
	fi
	local fg_git_branch=$(sgr_fg24 ${ps1_rgb_git_block[*]})
	local bg_git_branch=${bg_default}
	local fg_git_dirty=$(sgr_fg24 ${ps1_rgb_git_block[*]})
	local bg_git_dirty=${bg_default}
	local bg_git_clean=$(sgr_bg24 ${ps1_rgb_git_block[*]})

	ps1_git_anchor="${fg_git_anchor}${bg_git_anchor}${ps1_git_anchor}${end}"
	ps1_git_branch="${reverse}${fg_git_branch}${bg_git_branch}${ps1_git_branch}${end}"
	ps1_git_dirty="${reverse}${fg_git_dirty}${bg_git_dirty}${ps1_git_dirty}${end}"
	ps1_git_clean="${bg_git_clean}${ps1_git_clean}${end}"

}

# Style python virtual environment components
style_ps1_pyvenv(){

	#ps1_rgb_pyvenv_block=(43 91 132)			# Python blue
	ps1_rgb_pyvenv_block=(255 211 67)			# Python yellow

	local end=$(sgr 0)
	local reverse=$(sgr 7)
	local bg_default=$(sgr 49)
	local fg_pyvenv_anchor=$(sgr_fg24 ${ps1_rgb_pyvenv_block[*]})
	local bg_pyvenv_anchor=${bg_default}
	local fg_pyvenv_venv=$(sgr_fg24 ${ps1_rgb_pyvenv_block[*]})
	local bg_pyvenv_venv=${bg_default}

	ps1_pyvenv_anchor="${fg_pyvenv_anchor}${bg_pyvenv_anchor}${ps1_pyvenv_anchor}${end}"
	ps1_pyvenv_venv="${reverse}${fg_pyvenv_venv}${bg_pyvenv_venv}${ps1_pyvenv_venv}${end}"
	
}

# Set PS1
set_ps1(){
	set_ps1_components
	if is_color_term; then
		style_ps1_components
		style_ps1_vimode
	fi
	PS1=$(ps1)
}

# Set RPS1
set_rps1(){
	set_pyvenv
	set_git
	if is_color_term; then
		style_ps1_git
		style_ps1_pyvenv
	fi
	local ps1_pyvenv="${ps1_pyvenv_anchor}${ps1_pyvenv_venv}"
	local ps1_git="${ps1_git_anchor}${ps1_git_branch}${ps1_git_status}"
	RPS1="${ps1_pyvenv}${ps1_git}"
}

# Update vi mode
set_vimode(){
	case "$KEYMAP" in
		main|viins)
			local ps1_vimode=${ps1_viins}
		;;
		vicmd)
			local ps1_vimode=${ps1_vicmd}
		;;
	esac
	PS1="${ps1_vimode}$(ps1)"
}

# Git branch
set_git(){
	if [ -d .git ]; then
		
		# Branch
		ps1_git_anchor=$'\xEE\x82\xB2'
		local branch_glyph=$'\xEE\x82\xA0'
		ps1_git_branch=" ${branch_glyph} ${$(git branch | grep '\*')/* /} "

		# Status
		case "$(git status --porcelain=2 | awk '{print $1}')" in
			1*)
				ps1_git_status=${ps1_git_dirty}
			;;
			*)	
				ps1_git_status=${ps1_git_clean}
			;;
		esac

	else
		ps1_git_anchor=
		ps1_git_branch=
		ps1_git_status=
	fi
}

# Set python virtual ennvironment components
set_pyvenv(){
	if [[ "${VIRTUAL_ENV}" != "" ]]; then
		
		# Virtual environment
		ps1_pyvenv_anchor=$'\xEE\x82\xB2'
		ps1_pyvenv_venv=" ${VIRTUAL_ENV##*/} "                 # Strip dirs (https://gist.github.com/caruccio/4340471)
		#ps1_pyvenv_venv=" $(basename ${VIRTUAL_ENV}) "        # idem

	else
		ps1_pyvenv_anchor=
		ps1_pyvenv_venv=
	fi
}

# Update PS1 on keymap change
zle-keymap-select(){
	set_vimode
	zle reset-prompt
}

# Update PS1 line init
zle-line-init(){
	set_rps1
	set_vimode
	zle reset-prompt
}

# Network filesystems
#
#   netfs mount [all | mxn | sharepoint ]
#   netfs umount [all | mxn | sharepoint ]
#
#   'all' or no argument mounts all network filesystem.
#
netfs(){

	# Validate mount command selection
	local mountcmd
	if [[ ${1} == "mount" ]]; then
		mountcmd=mount
	elif [[ ${1} == "umount" ]]; then
		mountcmd=umount
	else
		echo "Unknown mount command: ${1}"
	fi

	# Build command strings
	declare -A cmds
	cmds[mxn_maralc]="${mountcmd} ${HOME}/mnt/mxn/maralc"
	cmds[mxn_groups]="${mountcmd} ${HOME}/mnt/mxn/groups"
	cmds[sharepoint_science_kits]="${mountcmd} ${HOME}/mnt/sharepoint/science/kits"
	cmds[sharepoint_science_blg]="${mountcmd} ${HOME}/mnt/sharepoint/science/blg"
	cmds[sharepoint_science_bls]="${mountcmd} ${HOME}/mnt/sharepoint/science/bls"
	cmds[sharepoint_docs_a]="${mountcmd} ${HOME}/mnt/sharepoint/docs/a"
	cmds[sharepoint_docs_b]="${mountcmd} ${HOME}/mnt/sharepoint/docs/b"
	cmds[sharepoint_docs_c]="${mountcmd} ${HOME}/mnt/sharepoint/docs/c"
	cmds[sharepoint_docs_d]="${mountcmd} ${HOME}/mnt/sharepoint/docs/d"
	cmds[sharepoint_accelerator_as]="${mountcmd} ${HOME}/mnt/sharepoint/accelerator/as"
	cmds[sharepoint_projects_portfolio]="${mountcmd} ${HOME}/mnt/sharepoint/projects/portfolio"

	# Validate filesystem selection
	declare -a filesystems
	if [[ $# -lt 2 ]] || [[ ${2} == "all" ]]; then
		filesystems=("mxn_maralc" "mxn_groups" "sharepoint_science_kits" "sharepoint_science_blg" "sharepoint_science_bls" "sharepoint_docs_a" "sharepoint_docs_b" "sharepoint_docs_c" "sharepoint_docs_d" "sharepoint_accelerator_as")
	elif [[ ${2} == "mxn" ]]; then
		filesystems=("mxn_maralc" "mxn_groups")
	elif [[ ${2} == "sharepoint" ]]; then
		filesystems=("sharepoint_science_kits" "sharepoint_science_blg" "sharepoint_science_bls" "sharepoint_docs_a" "sharepoint_docs_b" "sharepoint_docs_c" "sharepoint_docs_d")
	elif [[ ${2} == "sharepoint_science" ]]; then
		filesystems=("sharepoint_science_kits" "sharepoint_science_blg" "sharepoint_science_bls")
	elif [[ ${2} == "sharepoint_docs" ]]; then
		filesystems=("sharepoint_docs_a" "sharepoint_docs_b" "sharepoint_docs_c" "sharepoint_docs_d")
	elif [[ ${2} == "sharepoint_accelerator" ]]; then
		filesystems=("sharepoint_accelerator_as")
	elif [[ -v "cmds[${2}]" ]]; then
		filesystems=("${2}")
	else
		echo "Unknown filesystem: ${2}"
	fi

	# Set davfs2 config
	local davfs2_path="${HOME}/.davfs2/davfs2.conf"
	davfs2_conf > ${davfs2_path}

	# Mount/unmount selected filesystems
	for filesystem in ${filesystems[@]}; do
		${=cmds[${filesystem}]}
	done

	# Remove davfs2 config
	rm ${davfs2_path}

}

# Inventory hosts
_inventory_grep(){
	local inventories=("${(@f)$(cat ${HOME}/.inventories)}")
	curl \
	--silent \
	$inventories \
	| grep \
	--extended \
	--only-matching \
	--no-filename \
	${1}
}
_inventory_ccs(){
	_inventory_grep '^[[:alnum:]\-]*\-cc\-[[:digit:]]{1}'
}
_inventory_ipaps(){
	_inventory_grep '^[[:alnum:]\-]*ctl\-ipap\-[[:digit:]]{2}'
}

# cc completions
_complete_ccs(){
	_arguments "1:host:($(_inventory_ccs))"
}
_icepapcms(){ _complete_ccs }
_jive(){ _complete_ccs }
_astor(){ _complete_ccs }

# IcePAP completions
_complete_ipaps(){
	_arguments "1:host:($(_inventory_ipaps))"
}
_icepapsh(){ _complete_ipaps }
