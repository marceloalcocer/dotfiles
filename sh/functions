# Color support
is_color_term(){

	# Explicit color support
	case "$TERM" in
		xterm-color|*-256color)
			return 0
		;;
	esac

	# Implied color support
	if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
		return 0
	fi

	# No color support
	return 1
}

# ANSI select graphic rendition control sequences
sgr(){               # SGR (https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters)
	echo $'\x1B['${1}'m'
}
sgr_fg8(){           # 8-bit foreground color (https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit)
	echo $(sgr "38;5;${1}")
}
sgr_bg8(){           # 8-bit background color (https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit)
	echo $(sgr "48;5;${1}")
}
sgr_fg24(){          # 24-bit foreground color (https://en.wikipedia.org/wiki/ANSI_escape_code#24-bit)
	echo $(sgr "38;2;${1};${2};${3}")
}
sgr_bg24(){         # 24-bit background color (https://en.wikipedia.org/wiki/ANSI_escape_code#24-bit)
	echo $(sgr "48;2;${1};${2};${3}")
}

# Set PS1 components (placeholder)
set_ps1_components(){
	ps1_user=
	ps1_host=
	ps1_wd=
	ps1_anchor_host=
	ps1_anchor_wd=
	ps1_anchor_prompt=
}

# Style PS1 components
style_ps1_components(){

	ps1_rgb_user_block=(215 135 0)
	ps1_rgb_user_text=(248 248 242)
	ps1_rgb_host_block=(192 192 192)
	ps1_rgb_host_text=(39 40 34)
	ps1_rgb_wd_block=(64 64 64)
	ps1_rgb_wd_text=(248 248 242)

	local end=$(sgr 0)
	local bg_default=$(sgr 49)
	local fg_user=$(sgr_fg24 ${ps1_rgb_user_text[*]})
	local bg_user=$(sgr_bg24 ${ps1_rgb_user_block[*]})
	local fg_anchor_host=$(sgr_fg24 ${ps1_rgb_user_block[*]})
	local bg_anchor_host=$(sgr_bg24 ${ps1_rgb_host_block[*]})
	local fg_host=$(sgr_fg24 ${ps1_rgb_host_text[*]})
	local bg_host=$(sgr_bg24 ${ps1_rgb_host_block[*]})
	local fg_anchor_wd=$(sgr_fg24 ${ps1_rgb_host_block[*]})
	local bg_anchor_wd=$(sgr_bg24 ${ps1_rgb_wd_block[*]})
	local fg_wd=$(sgr_fg24 ${ps1_rgb_wd_text[*]})
	local bg_wd=$(sgr_bg24 ${ps1_rgb_wd_block[*]})
	local fg_anchor_prompt=$(sgr_fg24 ${ps1_rgb_wd_block[*]})
	local bg_anchor_prompt=${bg_default}

	ps1_user="${fg_user}${bg_user}${ps1_user}${end}"
	ps1_anchor_host="${fg_anchor_host}${bg_anchor_host}${ps1_anchor_host}${end}"
	ps1_host="${fg_host}${bg_host}${ps1_host}${end}"
	ps1_anchor_wd="${fg_anchor_wd}${bg_anchor_wd}${ps1_anchor_wd}${end}"
	ps1_wd="${fg_wd}${bg_wd}${ps1_wd}${end}"
	ps1_anchor_prompt="${fg_anchor_prompt}${bg_anchor_prompt}${ps1_anchor_prompt}${end}"

}

# Build PS1
ps1(){
	echo "${ps1_user}${ps1_anchor_host}${ps1_host}${ps1_anchor_wd}${ps1_wd}${ps1_anchor_prompt} "
}

# Set xterm title
set_xterm_title(){
	case "$TERM" in
		xterm*|rxvt*)
			set_ps1_components
			echo $'\x1B]0;'$(ps1)$'\x07'
	    ;;
	esac
}

# Listings
lc(){
	ll --color $1 | less -R
}

# su with xauth
sux(){
	local cookie=$(xauth list ${HOSTNAME}/unix:0)				# Extract xauth cookie
	cookie=${cookie/:/:0}							# Append display
	local xauthority="/home/$1/.Xauthority"					# Define Xauthority file path
	sudo XAUTHORITY="$xauthority" su -c "xauth add ${cookie}" $1		# Add cookie to Xauthority file
	sudo XAUTHORITY="$xauthority" su $1
}

# Backup copy
bucp(){
	cp "${1}" "${1}~"
}

# Filesystem hyperlink
hyln(){
	echo -e "<html><head><meta http-equiv=\"refresh\" content=\"0; url=${1}\"/></head></html>" > "${2}"
}

# Base converters
hex2dec(){
	echo "ibase=16; ${1}" | bc
}
dec2hex(){
	echo "obase=16; ${1}" | bc
}
oct2dec(){
	echo "ibase=8; ${1}" | bc
}
dec2oct(){
	echo "obase=8; ${1}" | bc
}
hex2bin(){
	echo "ibase=16; obase=2; ${1}" | bc
}
bin2hex(){
	echo "ibase=2; obase=16; ${1}" | bc
}

# Toggle touchpad
toggle_touchpad(){
	if [ "$(gsettings get org.gnome.desktop.peripherals.touchpad send-events)" = "'enabled'" ]; then
		gsettings set org.gnome.desktop.peripherals.touchpad send-events 'disabled'
	else
		gsettings set org.gnome.desktop.peripherals.touchpad send-events 'enabled'
	fi
}

# Remote IcePAP CMS
icepapcms(){
	ssh -Yf $1 "icepapcms --all-networks"
}

# Remote Jive
jive(){
	ssh -Yf $1 "jive"
}

# Remote astor
astor(){
	ssh -Yf $1 "astor"
}

# Remote itango
itango(){
	ssh -Y $1 "itango"
}

# Remote spock
spock(){
	ssh -Y $1 "spock" "${@:2}"
}

# IcePAP shell
icepapsh(){
	rlwrap --command-name=icepapsh --break-chars= nc $1 5000
}

# Colorize dig output
#
# based on https://github.com/repro/dig-color
#
dig-color(){
	\dig $* | awk '					# N.b. backslash to avoid aliasing
		!/^;/    { print "\033[33m"$0 }
		/^;[^;]/ { print "\033[39m"$0 }
		/^;;/    { print "\033[39m"$0 }
		END      { print "\033[0m" }
	';
}

# Wake on lan
#
#  Send WoL magic packet over UDP
#
#  Usage:
#
#    wol MAC ADDRESS [PORT]
#    wol FILE
#
#  Examples:
#
#    wol 01:02:03:04:05:06 192.168.0.255 7    # Send magic packet to 01:02:03:04:05:06
#                                             # via UDP broadcast to 192.168.0.255, port 7
#
#    wol 01:02:03:04:05:06 192.168.0.255      # Send magic packet to 01:02:03:04:05:06
#                                             # via UDP broadcast to 192.168.0.255, port 9
#                                             # (dicard protocol port)
#
#    wol file.wol                             # Send magic packet to MAC in file.wol
#                                             # via UDP broadcast to address in file.wol, port
#                                             # in file.wol (defaults to 9)
#
#  Format of FILE: MAC ADDRESS PORT
#
#  Magic packet structure: https://en.wikipedia.org/wiki/Wake-on-LAN#Magic_packet
#
wol(){

	# Parse args
	local mac=
	local addr=
	local port=
	if [[ -e $1 ]]; then
		mac=$(awk '//{print $1}' $1)
		addr=$(awk '//{print $2}' $1)
		port=$(awk '//{print $3}' $1)
	else
		mac=$1
		addr=$2
		port=$3
	fi
	port=${port:-9}						# Default to unofficial WoL UDP port (9)

	# Append header bytes (6 * 0xFF) to magic packet payload
	local magic=""
	local header="\xFF"
	for i in {1..6}; do
		magic+=$(echo -en ${header})
	done

	# Concatenate MAC bytes (16 * MAC) to magic packet payload
	mac=${mac//:/}
	for i in {1..16}; do
		for ((nibble=0; nibble<${#mac}; nibble+=2)); do
			magic+=$(echo -en "\x${mac:$nibble:2}")
		done
	done

	# Send magic packet
	echo -en ${magic} | nc -Nub -w 0 ${addr} ${port}

}

# SOCKS over SSH
sshocks(){
	local host=$1
	local port=$2
	ssh -T -D $port $host
}
